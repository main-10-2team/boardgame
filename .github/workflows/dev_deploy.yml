name: Development Server Deployment

on:
  push:
    branches:
      - develop

jobs:
  dev_deploy:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        run: |
          docker build --platform linux/amd64 -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:django-dev .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:django-dev
          docker build --platform linux/amd64 -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:nginx-dev -f ./resources/nginx/Dockerfile.dev ./resources/nginx
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:nginx-dev

      - name: get GitHub Actions IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Add GitHub IP to AWS
        run: |
          aws ec2 authorize-security-group-ingress \
          --group-id ${{ secrets.AWS_SG_ID }} \
          --protocol tcp --port 22 \
          --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_DEV_HOST }}
          username: ${{ secrets.EC2_DEV_USER }}
          key: ${{ secrets.EC2_DEV_SSH_KEY }}
          script: |
            sudo rm -f ${{ secrets.ENV_FILE_NAME }}
            echo "${{ secrets.DJANGO_DEV_ENVS }}" >> ${{ secrets.ENV_FILE_NAME }}
            
            for VOLUME in static-volume media-volume; do
              if ! docker volume inspect "$VOLUME" > /dev/null 2>&1; then
                echo "ðŸ›  Creating volume: $VOLUME"
                docker volume create "$VOLUME"
              else
                echo "âœ… Volume $VOLUME already exists"
              fi
            done
            
            docker stop ${{ secrets.DJANGO_CONTAINER_NAME }} || true
            docker rm ${{ secrets.DJANGO_CONTAINER_NAME }} || true
            docker rmi ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:django-dev
          
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:django-dev
            docker run -d \
              --name django \
              --network ws \
              -v static-volume:/boardq/app/static \
              -v media-volume:/boardq/app/media \
              -p 8000:8000\
              --env-file ${{ secrets.ENV_FILE_NAME }} \
              ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:django-dev \
              sh -c "python manage.py migrate && \
                python manage.py collectstatic --noinput && \
                gunicorn --workers 3 --bind 0.0.0.0:8000 config.wsgi:application"
            
                        
            docker stop ${{ secrets.NGINX_CONTAINER_NAME }} || true
            docker rm ${{ secrets.NGINX_CONTAINER_NAME }} || true
            docker rmi ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:nginx-dev
            
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:nginx-dev
            

            docker run -d \
              --network ws \
              --name nginx \
              -v static-volume:/vol/web/static \
              -v media-volume:/vol/web/media \
              -p 80:80 \
              ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:nginx-dev
            
            docker image prune -af

      - name: Remove GitHub IP from AWS SG
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.AWS_SG_ID }} \
            --protocol tcp --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32 \
            --region ap-northeast-2
